// 📊 Model Table Demo - Pandas-like Model Visualization
// Shows how to display detailed model information like in Python pandas

import { SARIMAX } from '../classes/SARIMAX.js';
import { StandardScaler } from '../classes/StandardScaler.js';
import { extractDataFromBVH } from '../utils/bvhUtils.js';
import { displayModelTable, createDataFrame, compareModels, exportToCSV, createHTMLTable } from '../utils/modelVisualization.js';
import fs from 'fs';

console.log("📊 Model Table Demo - Pandas-like Visualization");
console.log("=" .repeat(60));

// Load and prepare data
console.log("\n🔧 Loading and preparing data...");

const bvhData = extractDataFromBVH(
  './BVH/Bending/Train_Bending.bvh',
  'Hips_Xrotation',
  ['Spine_Yrotation', 'Spine_Zrotation', 'LeftArm_Xrotation', 'RightArm_Xrotation']
);

const trainData = bvhData.endog.map((endogValue, i) => [
  endogValue,
  ...bvhData.exog[i]
]);

const scaler = new StandardScaler();
const normalizedData = scaler.fitTransform(trainData);

const indEnd = 0;
const indExo = [1, 2, 3, 4];
const variables = ['Spine_Yrotation', 'Spine_Zrotation', 'LeftArm_Xrotation', 'RightArm_Xrotation', 
                  'Hips_Xrotation_T-1', 'Hips_Xrotation_T-2'];

const endogData = normalizedData.map(row => row[indEnd]);
const exogData = normalizedData.map(row => indExo.map(idx => row[idx]));

// Train model
console.log("🏋️ Training SARIMAX model...");
const model = new SARIMAX(endogData, exogData, 2);
model.fit();

console.log(`✅ Model trained with R² = ${model.summary().rSquared.toFixed(6)}`);

// =================================
// DEMO 1: Basic Model Table Display
// =================================
console.log("\n📊 DEMO 1: Basic Model Table Display");
console.log("-".repeat(50));

const modelTable = displayModelTable(model, variables, 'Hips_Xrotation', indExo);

// =================================
// DEMO 2: DataFrame-like Operations
// =================================
console.log("\n📋 DEMO 2: DataFrame-like Operations");
console.log("-".repeat(50));

const df = createDataFrame(modelTable);

console.log("🔍 Using .head() method (like pandas):");
df.head();

console.log("📈 Using .describe() method:");
df.describe();

console.log("📋 Using .info() method:");
df.info();

// =================================
// DEMO 3: Advanced DataFrame Operations
// =================================
console.log("\n🎯 DEMO 3: Advanced Operations");
console.log("-".repeat(50));

// Access specific rows
console.log("📍 Accessing row by index (iloc):");
const row0 = df.iloc(0);
console.log(`Row 0: ${row0.variable} = ${row0.coefficient.toFixed(6)} (p=${row0.pValue.toFixed(6)})`);

// Access by variable name
console.log("\n📍 Accessing by variable name (loc):");
const spineRow = df.loc('Spine_Yrotation');
if (spineRow) {
  console.log(`Spine_Yrotation: coef=${spineRow.coefficient.toFixed(6)}, p=${spineRow.pValue.toFixed(6)} ${spineRow.significance}`);
}

// Filter significant variables
console.log("\n🎯 Significant variables (p < 0.05):");
const significantVars = df.data.filter(row => row.pValue < 0.05);
significantVars.forEach(row => {
  console.log(`  ${row.variable}: ${row.coefficient.toFixed(6)} ${row.significance}`);
});

// =================================
// DEMO 4: Model Comparison
// =================================
console.log("\n🔍 DEMO 4: Model Comparison");
console.log("-".repeat(50));

// Train a second model with different configuration for comparison
const model2 = new SARIMAX(endogData, exogData, 1); // AR(1) instead of AR(2)
model2.fit();

const variables2 = ['Spine_Yrotation', 'Spine_Zrotation', 'LeftArm_Xrotation', 'RightArm_Xrotation', 
                   'Hips_Xrotation_T-1'];

const modelTable2 = displayModelTable(model2, variables2, 'Hips_Xrotation', indExo);

// Compare models
compareModels([
  { name: 'AR(2)', modelTable: modelTable },
  { name: 'AR(1)', modelTable: modelTable2 }
]);

// =================================
// DEMO 5: Export Capabilities
// =================================
console.log("\n💾 DEMO 5: Export Capabilities");
console.log("-".repeat(50));

// Export to CSV
const csvData = exportToCSV(modelTable);
fs.writeFileSync('model_coefficients.csv', csvData);
console.log("✅ Model exported to: model_coefficients.csv");

// Export to HTML
const htmlTable = createHTMLTable(modelTable);
const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>SARIMAX Model Results</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>🎯 SARIMAX Model Analysis Results</h1>
    ${htmlTable}
    <p><em>Generated by JavaScript SARIMAX implementation</em></p>
</body>
</html>`;

fs.writeFileSync('model_table.html', htmlContent);
console.log("✅ Model exported to: model_table.html");

// =================================
// DEMO 6: Detailed Analysis Examples
// =================================
console.log("\n🔬 DEMO 6: Detailed Analysis Examples");
console.log("-".repeat(50));

console.log("📊 Variable Importance Analysis:");
const sortedByAbsCoef = [...df.data].sort((a, b) => Math.abs(b.coefficient) - Math.abs(a.coefficient));
console.log("Top variables by absolute coefficient value:");
sortedByAbsCoef.slice(0, 3).forEach((row, i) => {
  console.log(`  ${i+1}. ${row.variable}: ${row.coefficient.toFixed(6)} ${row.significance}`);
});

console.log("\n📈 Significance Analysis:");
const significanceGroups = {
  'Highly Significant (p < 0.001)': df.data.filter(r => r.pValue < 0.001).length,
  'Significant (p < 0.01)': df.data.filter(r => r.pValue >= 0.001 && r.pValue < 0.01).length,
  'Moderately Significant (p < 0.05)': df.data.filter(r => r.pValue >= 0.01 && r.pValue < 0.05).length,
  'Not Significant (p >= 0.05)': df.data.filter(r => r.pValue >= 0.05).length
};

Object.entries(significanceGroups).forEach(([level, count]) => {
  console.log(`  ${level}: ${count} variables`);
});

// =================================
// DEMO 7: Equivalent Python Code
// =================================
console.log("\n🐍 DEMO 7: Python Equivalent");
console.log("-".repeat(50));

console.log("This JavaScript code is equivalent to the following Python:");
console.log(`
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX

# Train model
model = SARIMAX(endog, exog, order=(2,0,0))
results = model.fit()

# Display model table (what we just implemented)
pd.set_option('display.max_columns', 50)
dfModel_B = pd.DataFrame({
    'Variable': variables,
    'Coefficient': results.params,
    'Std_Error': results.bse,
    'T_Statistic': results.tvalues,
    'P_Value': results.pvalues
})

# Show table
dfModel_B.head()
dfModel_B.describe()
dfModel_B.info()
`);

console.log("\n🎉 Model Table Demo Complete!");
console.log("✅ Generated files:");
console.log("  📄 model_coefficients.csv - CSV export");
console.log("  🌐 model_table.html - HTML visualization");
console.log("\n💡 You can now use these functions in your own analysis:");
console.log("  📊 displayModelTable() - Show detailed table");
console.log("  📋 createDataFrame() - Pandas-like operations");
console.log("  🔍 compareModels() - Compare multiple models");

export { df, modelTable }; 